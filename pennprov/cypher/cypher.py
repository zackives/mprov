######################
## mProv Copyright (C) 2017-22 by Trustees of the University of Pennsylvania
## All Rights Reserved.
## 
##
# ## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
######################


import pycypher
import json

import pennprov.sql.sql_provenance
import pennprov.metadata.graph_template

from pennprov.metadata.catalog_manager import Catalog

class Variable:
    def __init__(self, var_name):
        self.var = var_name

class Label:
    def __init__(self, label):
        self.label = label

class Node:
    def __init__(self, opt_name, opt_label):
        return

class Edge:
    def __init__(self, opt_name, opt_label):
        return

class CypherInterface:
    catalog: Catalog = Catalog()


    def _get_leaves(self, query_parse_tree, ret_list):
        """
        Take an AST and return (in `ret_list`) the list of all leaf nodes
        """
        if 'children' in query_parse_tree and \
            ('result' not in query_parse_tree['children'] or len(query_parse_tree['children']) == 0):
            ret_list.append(query_parse_tree['node'])
            return ret_list
        else:
            if isinstance(query_parse_tree, list):
                for item in query_parse_tree:
                    self._get_leaves(item, ret_list)
            else:
                for item in query_parse_tree['children']['result']:
                    self._get_leaves(item, ret_list)
            return

    def _get_match_template(self, where_tokens):
        return

    def parse(self, cypher_query:str):
        """
        Parse `cypher_query` using pycypher parser.  Returns an AST and a list of terminal tokens.

        Returns a pair:
        - tree -- the actual parse AST generated by ANTLR / pycypher
        - token_list -- the leaf tokens
        """
        result = pycypher.parse(cypher_query)['result']

        print ('Errors: %s'%result[0]['children']['errors'])

        ret_list = []
        self._get_leaves(result,ret_list)
        return result, ret_list

    def execute(self, cypher_query: str):
        return []

