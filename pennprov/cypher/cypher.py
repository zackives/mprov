#pip3 install --global-option=build_ext --global-option="-I/opt/homebrew/include" --global-option="-L/opt/homebrew/lib" libcypher-parser-python

#import pennprov.metadata.graph_template
#import pennprov.models.graph_script

import pycypher
import json

import pennprov.sql.sql_provenance
from pennprov.metadata.catalog_manager import Catalog

class Variable:
    def __init__(self, var_name):
        self.var = var_name

class Label:
    def __init__(self, label):
        self.label = label

class Node:
    def __init__(self, opt_name, opt_label):
        return

class Edge:
    def __init__(self, opt_name, opt_label):
        return

class CypherInterface:
    catalog: Catalog = Catalog()


    def get_leaves(self, query_parse_tree, ret_list):
        """
        Take an AST and return (in `ret_list`) the list of all leaf nodes
        """
        if 'children' in query_parse_tree and \
            ('result' not in query_parse_tree['children'] or len(query_parse_tree['children']) == 0):
            ret_list.append(query_parse_tree['node'])
            return ret_list
        else:
            if isinstance(query_parse_tree, list):
                for item in query_parse_tree:
                    self.get_leaves(item, ret_list)
            else:
                for item in query_parse_tree['children']['result']:
                    self.get_leaves(item, ret_list)
            return

    def execute(self, cypher_query: str):
        return []

    def parse(self, cypher_query:str):
        """
        Parse `cypher_query` using pycypher parser

        Returns a pair:
        - tree -- the actual parse AST generated by ANTLR / pycypher
        - token_list -- the leaf tokens
        """
        result = pycypher.parse(cypher_query)['result']

        print ('Errors: %s'%result[0]['children']['errors'])

        ret_list = []
        self.get_leaves(result,ret_list)
        return result, ret_list

ci = CypherInterface()

tree, ret_list = ci.parse('MATCH (n) -[y:val]-> (x: tag), (n) -[second]-> (x) where x="Test" RETURN Count(n), x;')
for item in ret_list:
    print('%s'%item)